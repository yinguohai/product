<?php
namespace app\index\model;
use think\Collection;
use think\Model;
use think\Db;

class Product extends Model{
    private $filed=true;
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取产出相关信息
     * @param array $where
     * @param Boolean $flag 过滤产品来源条件
     * @param $page 是否分页
     * @return array
     */
    public function getProducts($where=[],$flag=true){
        $field='p.pro_id,p.addtime, p.encode, p.pro_name, p.pro_enname, p.zone, p. status, p.img, GROUP_CONCAT(v.v_id order by v.v_id separator \'@@\') as v_id, GROUP_CONCAT(v.v_num order by v.v_id SEPARATOR \'@@\') as v_num, GROUP_CONCAT(v.source_href order by v.v_id separator \'@@\') as v_source, GROUP_CONCAT(v.v_name order by v.v_id SEPARATOR \'@@\') as v_name ,GROUP_CONCAT(v.v_sort order by v.v_id SEPARATOR \'@@\') as v_sort  ';
        try{
            $totalSql= $this->alias('p')
                ->field($field)
                ->join('jh_vender v','p.pro_id = v.pro_id');
                //设置查询条件
                if(!empty($where))
                    foreach($where as $k =>$v){
                        if(is_array($v) && in_array('in',$v)){
                            $totalSql=$totalSql->wherein($k,end($v));
                        }else{
                            $totalSql=$totalSql->where($where);
                        }
                    }
                $totalNum=$totalSql->group('pro_id')->count();
            //判断是否过滤掉产品来源条件
            if(empty($flag) && !empty($where)){
                foreach($where as $k => $v){
                    if(strpos($k,'v.')!==false)
                        unset($where[$k]);
                }
            }

            $where2 = array();
            $query = array();
            if(!empty($where))
            if(!empty($where['p.pro_id'])){
                $query['pro_id'] = implode(',',($where['p.pro_id'][1]));//组装pro_id=1,3,5塞进分页a标签的href里面
            }else{
                foreach($where as $k =>$v){
                    if(strpos($k,'p.')!==false){
                        $k=str_replace('p.','',$k);
                    }elseif(strpos($k,'v.')){
                        $k=str_replace('v.','',$k);
                    }
                    $v[1]=str_replace('%','',$v[1]);
                    $query[$k]=implode(',',$v);
                }
            }


            $where2['query'] = $query;
            ///index/Index/showProduct?pro_id=1,3,5&page=2
            $sql= $this->alias('p')
                ->field($field)
                ->join('jh_vender v','p.pro_id = v.pro_id');
                if(!empty($where))
                    foreach($where as $k =>$v){
                        if(is_array($v) && in_array('in',$v)){
                            $sql=$sql->wherein($k,end($v));
                        }else{
                            $sql=$sql->where($where);
                        }
                    }

                $list=$sql->group('pro_id')
                ->paginate(4,$totalNum,$where2);
                $result=$list->toArray()['data'];
        }catch (\Error $e){
            return ['code'=>$e->getCode(),'errormsg'=>$e->getMessage()];
        }catch (\Exception $e){
            return ['code'=>$e->getCode(),'errormsg'=>$e->getMessage()];
        }
        return ['list'=>$list,'content'=>$result];
    }
    /**
     * 删除产品
     * @param $where
     * @param $type false 产品和来源要一起删除  ，  true  --只删产品
     */
    public function deleteProduct($where,$type=false){
        $flag=true;
        try{
            //开启事务
            Db::startTrans();
            $flag=$this->where($where)->delete() && $flag;
            if(empty($type))
                $flag=Db::name('vender')->where($where)->delete() && $flag;
        }catch(\Error $e){
            Db::rollback();
            outputJson(2,$e->getMessage());
        }catch(\Exception $e){
            Db::rollback();
            outputJson(2,$e->getMessage());
        }
        if($flag){
            Db::commit();
        }else{
            Db::rollback();
        }
        return true;
    }

    /**
     * 保存产品
     * @param array $data  需要保存的产品
     * @param string $type
     * @return bool|false|int
     */
    public function saveProduct($data=[],$type=false){
        $productValidate = new \app\index\validate\ProductValidate();
        if(empty($data))
            return false;
        try{
            if(empty($type)){
                if(!($productValidate->scene('saveProduct')->check($data))){
                   return ['msg' => $productValidate->getError(),'encode'=>$data['encode']];
                }

                $result=$this->allowField(true)->insertGetId($data);
                return $result;
            }else{
                $result=$this->isUpdate()->allowField(true)->save($data);
                return $result===false?false:true;
            }
        }catch(\Error $e){
            return false;
        }catch(\Exception $e){
            return ['encode'=>$data['encode'],'msg'=>'产品编码已存在'];
        }

    }

    /**
     * 产品图片信息
     * @param array $where
     * @return array|bool
     */
    public function getProductImgs($where=[]){
        $fields=['img','pro_id'];
        $result=$this->field($fields)->where($where)->select();
        if(!empty($result))
            return collection($result)->toArray();
        return false;
    }

    /**
     * 获取指定产品
     * @param array $where
     */
    public function getProduct($where=[]){
        if(empty($where))
            return ['status'=>2,'msg'=>'产品没有选择'];
        $result=$this->where($where)->find()->toArray();
        if(empty($result)){
            return ['status'=>2,'msg'=>'没有找到产品'];
        }else{
            return ['status'=>1,'data'=>$result];
        }
    }


   
    //=========================================================
    /**
     * 保存产品图片
     * @param array $data  需要保存的产品
     * @param string $type
     * @return bool|false|int
     */
    public function saveProduct_images($data=[],$type=false,$where=[]){
        if(empty($data))
            return false;
        try{
            if(!$type){
                $result=Db::name('photo_gallery')->insertGetId($data);
                return $result;
            }else{
                $result=Db::name('photo_gallery')->where($where)->update($data);
                return $result===false?false:true;
            }
        }catch(\Error $e){
            return false;
        }catch(\Exception $e){
            return false;
        }
    }

    /**
     * 获取指定产品图片
     * @param array $where
    */
    public function get_photo_gallery($where=[]){

        $result = Db::name('photo_gallery')->where($where)->select();
        if($result){
            foreach($result as $k=>$v){
                $result2[$k]['photo_id'] = $v['photo_id'];
                $result2[$k]['photo_key'] = $v['photo_key'];
            }
            $result2 = json_encode($result2);
        }else{
            $result2 = '';
        }
        return $result2;

    }

    /*
     * 删除图片
     * @param string $id 图片主键id
     */
    public function del_photo_gallery($id){
        $id = Db::name('photo_gallery')->delete($id);
        return $id;
    }

}